// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: food.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryClubClient is the client API for DeliveryClub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClubClient interface {
	GetRandomFood(ctx context.Context, in *FoodRequest, opts ...grpc.CallOption) (*FoodResponse, error)
	GetRandomFoodFromCollection(ctx context.Context, in *FoodFromCollectionRequest, opts ...grpc.CallOption) (*FoodFromCollectionResponse, error)
}

type deliveryClubClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClubClient(cc grpc.ClientConnInterface) DeliveryClubClient {
	return &deliveryClubClient{cc}
}

func (c *deliveryClubClient) GetRandomFood(ctx context.Context, in *FoodRequest, opts ...grpc.CallOption) (*FoodResponse, error) {
	out := new(FoodResponse)
	err := c.cc.Invoke(ctx, "/food.DeliveryClub/GetRandomFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClubClient) GetRandomFoodFromCollection(ctx context.Context, in *FoodFromCollectionRequest, opts ...grpc.CallOption) (*FoodFromCollectionResponse, error) {
	out := new(FoodFromCollectionResponse)
	err := c.cc.Invoke(ctx, "/food.DeliveryClub/GetRandomFoodFromCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryClubServer is the server API for DeliveryClub service.
// All implementations must embed UnimplementedDeliveryClubServer
// for forward compatibility
type DeliveryClubServer interface {
	GetRandomFood(context.Context, *FoodRequest) (*FoodResponse, error)
	GetRandomFoodFromCollection(context.Context, *FoodFromCollectionRequest) (*FoodFromCollectionResponse, error)
	mustEmbedUnimplementedDeliveryClubServer()
}

// UnimplementedDeliveryClubServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryClubServer struct {
}

func (UnimplementedDeliveryClubServer) GetRandomFood(context.Context, *FoodRequest) (*FoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomFood not implemented")
}
func (UnimplementedDeliveryClubServer) GetRandomFoodFromCollection(context.Context, *FoodFromCollectionRequest) (*FoodFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomFoodFromCollection not implemented")
}
func (UnimplementedDeliveryClubServer) mustEmbedUnimplementedDeliveryClubServer() {}

// UnsafeDeliveryClubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryClubServer will
// result in compilation errors.
type UnsafeDeliveryClubServer interface {
	mustEmbedUnimplementedDeliveryClubServer()
}

func RegisterDeliveryClubServer(s grpc.ServiceRegistrar, srv DeliveryClubServer) {
	s.RegisterService(&DeliveryClub_ServiceDesc, srv)
}

func _DeliveryClub_GetRandomFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryClubServer).GetRandomFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/food.DeliveryClub/GetRandomFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryClubServer).GetRandomFood(ctx, req.(*FoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryClub_GetRandomFoodFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryClubServer).GetRandomFoodFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/food.DeliveryClub/GetRandomFoodFromCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryClubServer).GetRandomFoodFromCollection(ctx, req.(*FoodFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryClub_ServiceDesc is the grpc.ServiceDesc for DeliveryClub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryClub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "food.DeliveryClub",
	HandlerType: (*DeliveryClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomFood",
			Handler:    _DeliveryClub_GetRandomFood_Handler,
		},
		{
			MethodName: "GetRandomFoodFromCollection",
			Handler:    _DeliveryClub_GetRandomFoodFromCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "food.proto",
}
